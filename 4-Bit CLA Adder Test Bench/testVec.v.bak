module testVec_tb();
	//inputs
	reg [3:0] A, B;
	reg Ci;
	//outputs
	wire [3:0] S;
	wire Co, PG, GG;
	//testing vectors
	reg [3:0] vectNum, errors;
	reg [3:0] Sexpected;
	reg Cexpected;
	reg clk;
	reg [13:0] testvectors[10000:0];
	//calling module
	CLA4 main(A, B, Ci, S, Co, PG, GG);
	//generate clock
	always
		begin
			clk = 1; #50; clk = 0; #50; //total period is 100 : default in modelsim simulation
		end
	
	initial begin
		$readmemb("C:/intelFPGA_lite/CMPE 125/Labs/Lab 5/test_vector.tv", testvectors);
		vectNum = 0; errors = 0;
	end
	//apply test vectors on rising edge of clk
	always@(posedge clk)
		begin
			#1; {A[3:0], B[3:0], Ci, Sexpected[3:0], Cexpected} = testvectors[vectNum];
			$display("Inputs A = %b, B = %b", A, B);
		end	
	//check results on falling edge
	always@(negedge clk)
	begin
		if(S !== Sexpected & Co !== Cexpected)
		begin
			$display("Error: Inputs A = %b, B = %b, Cin = %b", A, B, Ci);
			$display("Outputs: Sum = %b (expected : %b)	Cout = %b (expected : %b)", S, Sexpected, Co, Cexpected);				errors = errors + 1;
		end
		else
		begin
			$display("Success: Inputs A = %b, B = %b, Cin = %b", A, B, Ci);
			$display("Outputs: Sum = %b (expected : %b)	Cout = %b (expected : %b)", S, Sexpected, Co, Cexpected);
		end
		
		vectNum = vectNum +1;
		
		if(testvectors[vectNum] === 14'bx)
		begin
			$display("%d test completed with %d errors", vectNum, errors);
		end
		end
endmodule