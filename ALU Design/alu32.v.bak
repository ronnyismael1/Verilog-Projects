module alu32(
  input [31:0] A, B,
  input [2:0] F,
  output reg [31:0] Y,
  output reg Overflow,
  output reg Zero
);
  wire [31:0] S, Bout;
  wire CarryIn_MSB, CarryOut_MSB;

  assign Bout = F[2] ? ~B : B;
  assign S = A + Bout + F[2];
  assign CarryIn_MSB = (A[31] & Bout[31]) | (A[31] & F[2]) | (Bout[31] & F[2]);
  assign CarryOut_MSB = S[31] ^ A[31] ^ Bout[31];

  always @ (*)
    case (F[1:0])
      2'b00: Y <= A & Bout;
      2'b01: Y <= A | Bout;
      2'b10: Y <= S;
      2'b11: Y <= S[31];
    endcase

  always @ (*) begin
    Overflow <= CarryIn_MSB ^ CarryOut_MSB;
    Zero <= (Y == 32'b0);
  end

endmodule
